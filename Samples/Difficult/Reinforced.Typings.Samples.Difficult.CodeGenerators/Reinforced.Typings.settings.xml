<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!-- 
		Hi! This is settings file for Reinforced.Typings.
		Since Reinforced.Typings is not a framework itself but build process extension,
		therefore settings file is basically piece of MSBuild script.
		This file is being imported to your .csproj during each build the same way
		as Reinforced.Typings.targets that is located in its package /build directory.
		
		Reinforced.Typings has completely few parameters. So, here we go.
	-->
	
	<PropertyGroup>
	
		<!-- 
			This property points target file where to put generated sources. 
			It is not used if RtDivideTypesAmongFiles='true' specified.
			Important! Do not forget to include generated file to solution.
		-->
		<RtTargetFile>$(ProjectDir)Scripts\ReinforcedTypings\GeneratedTypings.ts</RtTargetFile>
		
		<!--
			This property sets RT configuration method for fluent configuration.
			If you dont want to use attributes for some reason then here you can
			specify full-qualified configuration method name (including namespace, 
			type and method name, e.g. My.Assembly.Configuration.ConfigureTypings) 
			of method that consumes Reinforce.Typings.Fluent.ConfigurationBuilder type
			and is void (nothing returns). This method will be executed to build 
			types exporting configuration in fluent manner.
			Surely you can continue using attributes. Also fluent configuration methods
			could not provide a way to configure some specific things (generics parameters
			override and classes' TsBaseParam). However in this case fluent configuration
			would be preferred. It means that if member configuration is supplied both 
			in attributes and in fluent methods then configuration from fluent methods will
			be used.
		-->
		<RtConfigurationMethod>Reinforced.Typings.Samples.Difficult.CodeGenerators.ReinforcedTypings.Configuration.Configure</RtConfigurationMethod>
		
		<!--
			Disables typescript compilation in solution. 
			Use it when your TypeScripts are broken and you need to rebuild project and then regenerate typings 
			to fix it, but TypeScript compilation fails and failing project build. This option will temporary 
			disable typescripts build.
		-->
		<RtBypassTypeScriptCompilation>false</RtBypassTypeScriptCompilation>
		
		<!--
			Disables Reinforced.Typings generation on build. Use it when it is necessary to temporary disable 
			typings generation.
		-->
		<RtDisable>false</RtDisable>		
		
	</PropertyGroup>
	
	<!--
		If you want Reinforced.Typings to lookup for attributed classes not only current
		project's assembly but also another assembly then you can specify it in RtAdditionalAssembly
		item group. 
		
		Reinforced.Typings receives reference assemblies list from CoreCompile task so you
		can specify here assemblies from your project's references (with or without .dll extension).
		If desired assembly is not in references list of current project then you will have
		to specify full path to it.
	
	<ItemGroup>
		<RtAdditionalAssembly Include="My.Project.Assembly"/>
		<RtAdditionalAssembly Include="My.Project.Assembly.dll"/>
		<RtAdditionalAssembly Include="C:\Full\Path\To\Assembly\My.Project.Assembly.dll"/>
		<RtAdditionalAssembly Include="$(SolutionDir)\AnotherProject\bin\Debug\AnotherProject.dll"/>
	</ItemGroup>
	-->
</Project>